{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://project_management/./src/components/base-component.ts","webpack://project_management/./src/util/validation.ts","webpack://project_management/./src/decorators/autobind.ts","webpack://project_management/./src/models/project.ts","webpack://project_management/./src/state/project-state.ts","webpack://project_management/./src/components/project-input.ts","webpack://project_management/./src/components/project-item.ts","webpack://project_management/./src/components/project-list.ts","webpack://project_management/./src/app.ts"],"sourcesContent":["// Component Class\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n\n    this.attach(insertAtStart);\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? 'afterbegin' : 'beforeend',\n      this.element\n    );\n  }\n}\n","// Validation\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n  let isValid = true;\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === 'string'\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === 'string'\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === 'number'\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid;\n}\n","// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n  return adjDescriptor;\n}\n","// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\n// Project Class\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public manday: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project, ProjectStatus } from '../models/project';\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  //ã€€Register a listener\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  // Get the only instance by the Singleton pattern\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new ProjectState();\n    }\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, manday: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      manday,\n      ProjectStatus.Active\n    );\n    this.projects.push(newProject);\n    this.updateListeners();\n  }\n\n  // Change the status of the project\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  // Notify the listener of changes\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice());\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","import { Component } from './base-component';\nimport * as Validation from '../util/validation';\nimport { autobind } from '../decorators/autobind';\nimport { projectState } from '../state/project-state';\n// ProjectInput Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  mandayInputElement: HTMLInputElement;\n\n  constructor() {\n    super('project-input', 'app', true, 'user-input');\n\n    this.titleInputElement = this.element.querySelector(\n      '#title'\n    ) as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      '#description'\n    ) as HTMLInputElement;\n    this.mandayInputElement = this.element.querySelector(\n      '#manday'\n    ) as HTMLInputElement;\n\n    this.configure();\n  }\n\n  configure() {\n    this.element.addEventListener('submit', this.submitHandler);\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredManday = this.mandayInputElement.value;\n\n    const titleValidatable: Validation.Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validation.Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const mandayValidatable: Validation.Validatable = {\n      value: +enteredManday,\n      required: true,\n      min: 1,\n      max: 1000,\n    };\n    if (\n      Validation.validate(titleValidatable) &&\n      Validation.validate(descriptionValidatable) &&\n      Validation.validate(mandayValidatable)\n    ) {\n      return [enteredTitle, enteredDescription, +enteredManday];\n    } else {\n      alert('The input value is incorrect. Please try again.');\n      return;\n    }\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = '';\n    this.descriptionInputElement.value = '';\n    this.mandayInputElement.value = '';\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, manday] = userInput;\n      projectState.addProject(title, desc, manday);\n      this.clearInputs();\n    }\n  }\n}\n","import { Draggable } from '../models/drag-drop';\nimport { Project } from '../models/project';\nimport { Component } from './base-component';\nimport { autobind } from '../decorators/autobind';\n\n// ProjectItem Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get manday() {\n    if (this.project.manday === 1) {\n      return this.project.manday.toString() + 'man-day';\n    } else if (this.project.manday < 20) {\n      return this.project.manday.toString() + 'man-days';\n    } else {\n      return (this.project.manday / 20).toString() + 'man-month';\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super('single-project', hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent): void {\n    event.dataTransfer!.setData('text/plain', this.project.id);\n    event.dataTransfer!.effectAllowed = 'move';\n  }\n\n  dragEndHandler(_: DragEvent): void {\n    console.log('End drag');\n  }\n\n  configure() {\n    this.element.addEventListener('dragstart', this.dragStartHandler);\n    this.element.addEventListener('dragend', this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector('h2')!.textContent = this.project.title;\n    this.element.querySelector('h3')!.textContent = this.manday;\n    this.element.querySelector('p')!.textContent = this.project.description;\n  }\n}\n","import { DragTarget } from '../models/drag-drop';\nimport { Project, ProjectStatus } from '../models/project';\nimport { Component } from './base-component';\nimport { autobind } from '../decorators/autobind';\nimport { projectState } from '../state/project-state';\nimport { ProjectItem } from './project-item';\n\n// ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: 'active' | 'finished') {\n    super('project-list', 'app', false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  // Handler when drug elements overlap with target elements\n  @autobind\n  dragOverHandler(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n      event.preventDefault();\n      const listEl = this.element.querySelector('ul')!;\n      listEl.classList.add('droppable');\n    }\n  }\n\n  // Handler when drag elements are dropped on the target element\n  @autobind\n  dropHandler(event: DragEvent): void {\n    const prjId = event.dataTransfer!.getData('text/plain');\n    projectState.moveProject(\n      prjId,\n      this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  // Handler when drug elements come off the target element\n  @autobind\n  dragLeaveHandler(_: DragEvent): void {\n    const listEl = this.element.querySelector('ul')!;\n    listEl.classList.remove('droppable');\n  }\n\n  configure() {\n    this.element.addEventListener('dragover', this.dragOverHandler);\n    this.element.addEventListener('drop', this.dropHandler);\n    this.element.addEventListener('dragleave', this.dragLeaveHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === 'active') {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      });\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n    this.element.querySelector('ul')!.id = listId;\n    this.element.querySelector('h2')!.textContent =\n      this.type === 'active' ? 'Active Project' : 'Finished Project';\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n    // NOTE: To prevent existing projects\n    listEl.innerHTML = '';\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(listEl.id, prjItem);\n    }\n  }\n}\n","import { ProjectInput } from './components/project-input';\nimport { ProjectList } from './components/project-list';\n\nnew ProjectInput();\nnew ProjectList('active');\nnew ProjectList('finished');\n"],"names":["Component","templateElement","hostElement","element","constructor","templateId","hostElementId","insertAtStart","newElementId","this","document","getElementById","importedNode","importNode","content","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","manday","status","State","listeners","addListener","listenerFn","push","ProjectState","projects","static","super","instance","addProject","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","descriptionInputElement","mandayInputElement","querySelector","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredManday","descriptionValidatable","mandayValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","listEl","innerHTML","prjItem"],"sourceRoot":""}